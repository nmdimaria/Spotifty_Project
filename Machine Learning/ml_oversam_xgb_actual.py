# -*- coding: utf-8 -*-
"""ML_OverSam_XGB_actual.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/nmdimaria/Spotify_Project/blob/will_grace/ML_OverSam_XGB_actual.ipynb
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler

file_to_read = pd.read_csv('filtered_data_70.csv')
df = pd.DataFrame(file_to_read)
df.head()

y=df["bi_popularity"]
X=df.drop(columns=["popularity","track_id", "year","bi_popularity", "genre","artist_name", "track_name", "release_date"])

# Get Dummies for mode and key
X = pd.get_dummies(X, columns=["mode", "key", "time_signature"])
X.head()

from imblearn.over_sampling import SMOTE
os = SMOTE()
X_oversample, y_oversample = os.fit_resample(X, y)

#Features shape
X_oversample.shape

"""Split and Train"""

# split the dataset into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_oversample,
   y_oversample,  random_state=1)
X_train.shape

# XGBoost model
from xgboost import XGBClassifier
model= XGBClassifier()

# Train the model
model.fit(X_train, y_train)

"""Results"""

# Create precictions with the model
y_pred = model.predict(X_test)
results = pd.DataFrame({
   "Prediction": y_pred,
   "Actual": y_test
}).reset_index(drop=True)
results.sample(25)

# Asses acuraccy score
from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)

# Generate confusion matrix
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, y_pred)

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

results["Actual"].value_counts()

results["Prediction"].value_counts()

"""Save ML Results

"""

import pickle

Pkl_Filename = "Pickle_XGB_Model.pkl"

#Save the file to working directory
with open(Pkl_Filename, 'wb') as file:  
    pickle.dump(model, file)

# Load the Model back from file
with open(Pkl_Filename, 'rb') as file:  
    Pickled_XGB_Model = pickle.load(file)

Pickled_XGB_Model